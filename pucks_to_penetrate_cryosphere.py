# Imports and plotting setups
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import scipy
import math

import math_funcs

from scipy.constants import (
    epsilon_0,   # Permittivity of free space (vacuum)
    mu_0,        # Permeability of free space (vacuum)
    c,           # Speed of light in vacuum
    #e,           # Elementary charge
    #h,           # Planck constant
    #hbar,        # Reduced Planck constant (h-bar)
    k,           # Boltzmann constant
    #G,           # Newtonian constant of gravitation
    #m_e,         # Electron mass
    #m_p,         # Proton mass
    #m_n,         # Neutron mass
    #alpha,       # Fine-structure constant
    eV,          # Electron volt
)

def evaluate_number_of_pucks_on_arbitrary_europa(
        T_u = 104, #K
        T_l = 230, #K
        T_melt = 273.13, #K
        T_conv = 251.6, #K
        D_cond = 10.4e3, #m
        D_phi = 3.2e3, #m
        eta_vac = 0.1, #np.arrange(0, 0.3, 0.1)
        rho_salt = 1e-5, #np.linspace(1e-3, 4.2e-2, 10)
        D_conv = 5.8e3, #m
        delta_d = 10 #m
    ):
    import numpy as np
    class europa_ice_model:
        def __init__(self,
            T_u = 104, #K
            T_l = 230, #K
            T_melt = 273.13, #K
            T_conv = 251.6, #K
            D_cond = 10.4e3, #m
            D_phi = 3.2e3, #m
            eta_vac = 0.1, #np.arrange(0, 0.3, 0.1)
            rho_salt = 1e-5, #np.linspace(1e-3, 4.2e-2, 10)
            D_conv = 5.8e3, #m
            delta_d = 10 #m
            ):

            self.T_u = T_u 
            self.T_l = T_l 
            self.T_melt = T_melt 
            self.T_conv = T_conv 
            self.D_cond = D_cond 
            self.D_phi = D_phi 
            self.eta_vac = eta_vac 
            self.rho_salt = rho_salt 
            self.D_conv = D_conv 
            self.delta_d = delta_d
            
            self.D_total = self.D_cond + self.D_conv

            self.cryosphere_model_df = pd.DataFrame({'Depth (m)':\
                np.arange(0, self.D_total+delta_d, delta_d)})
            self.cryosphere_model_df['Temperature (K)'] = \
                self.cryosphere_model_df['Depth (m)'].map(self.temperature_at_depth)
            self.cryosphere_model_df['Porosity (m^3/m^3)'] = \
                self.cryosphere_model_df['Depth (m)'].map(self.porosity_at_depth)
            self.cryosphere_model_df['Salt fraction (kg/kg)'] = \
                self.cryosphere_model_df['Depth (m)'].map(self.salt_fraction_at_depth)

            # Estimate the dielectric constant of the ice
            T = self.cryosphere_model_df['Temperature (K)']

            self.cryosphere_model_df['epsilon_s_prime'] = 3.1884 + 0.00091*(T - 273.13)
            self.cryosphere_model_df['epsilon_s_primeprime'] = 10**(-3.0129 + 0.0123*(T - 273.13))

            # Modify the epsilon s primes by the TVB
            epsilon_s_prime = self.cryosphere_model_df['epsilon_s_prime']
            epsilon_s_primeprime = self.cryosphere_model_df['epsilon_s_primeprime']
            eta_vac = self.cryosphere_model_df['Porosity (m^3/m^3)']
            epsilon_s = (epsilon_s_prime - 1j * epsilon_s_primeprime) * epsilon_0
            epsilon_m = epsilon_s + (3 * eta_vac * epsilon_s * (epsilon_0 - epsilon_s)) \
                / ((2 * epsilon_s + epsilon_0) - eta_vac * (epsilon_0 - epsilon_s))

            self.cryosphere_model_df['epsilon_s_prime'] = np.real(epsilon_m / epsilon_0)
            self.cryosphere_model_df['epsilon_s_primeprime'] = -1 * np.imag(epsilon_m / epsilon_0)

            # Estimate the conductivity of the ice
            molar_mass_salt = (35.453 + 22.990) / 1000 # kg/mol
            molarity_salt = self.cryosphere_model_df['Salt fraction (kg/kg)'] / molar_mass_salt
            micro_molarity_salt = molarity_salt * 1e6

            self.cryosphere_model_df['sigma_s'] = 1e-6 * \
                (9 * np.e ** ((0.58*eV/k) * (1 / 258.15 - 1 / T)) \
                + 0.55 * micro_molarity_salt * np.e ** ((0.22*eV/k) * (1 / 258.15 - 1 / T)))

        def temperature_at_depth(self, d):
            if d > self.D_cond + self.D_conv:
                return self.T_melt
            elif d > self.D_cond:
                return self.T_conv
            else:
                m, b = math_funcs.linear_fit(
                    0, self.T_u, 
                    self.D_cond, self.T_l)
                return m * d + b

        def porosity_at_depth(self, d):
            if d <= self.D_phi:
                return self.eta_vac
            else:
                return 0
            
        def salt_fraction_at_depth(self, d):
            return self.rho_salt


    eim = europa_ice_model(
        T_u, 
        T_l, 
        T_melt, 
        T_conv, 
        D_cond, 
        D_phi,
        eta_vac, 
        rho_salt, 
        D_conv,
        delta_d
    )

    from scipy.special import loggamma, factorial, gamma
    from decimal import Decimal
    import decimal

    def transmissivity_fBm(
            f, epsilon_i_prime, epsilon_t_prime, sigma_A, H, 
            theta_i, theta_t, phi_t, bistatic_polarization,
            tolerance = 1e-5,
            decimal_precision = int(1e3),
            max_n_convergence = 10.0,
            debug = False
            ):
        
        # Evaluate constants
        omega = 2 * np.pi * f

        lambda_i = c / (f * np.sqrt(epsilon_i_prime)) 
        lambda_t = c / (f * np.sqrt(epsilon_t_prime)) 
        k_i = 2 * np.pi / lambda_i
        k_t = 2 * np.pi / lambda_t

        eta_xy = np.sqrt((k_t * np.sin(theta_t) * np.cos(phi_t) - k_i * np.sin(theta_i))**2 \
                        + (k_t * np.sin(theta_t) * np.sin(phi_t))**2)
        eta_z = k_i * np.cos(theta_i) - k_t * np.cos(theta_t)

        # Evaluate the series S at 0
        n = 0

        first_fraction = ((-1) ** n) / (2**(2*n) * (factorial(n))**2)
        second_fraction = (eta_xy)**(2*n) / (0.5 * eta_z**2 * sigma_A**2)**((n+1)/H)
        third_factor = gamma((n + 1) / H)

        sum = Decimal(first_fraction*second_fraction*third_factor)
        delta_sum_list = [np.log(first_fraction*second_fraction*third_factor)]
        old_log_factorial = np.log(factorial(n))
        accuracy_overflow = False

        # Evaluate the series S from 1 to max_n_convergence
        # or until the terms is less than tolerance
        for n in np.arange(1.0, max_n_convergence + 1.0, 1):

            new_log_factorial = 2 * np.log(n) + old_log_factorial
            old_log_factorial = new_log_factorial
            kernel =  -2 * n * np.log(2) \
                - new_log_factorial \
                    + 2 * n * np.log(eta_xy) \
                        - ((n+1) / H)*np.log(0.5 * eta_z**2 * sigma_A**2) \
                            + loggamma((n + 1) / H)
            
            delta_sum = Decimal(np.e)**Decimal(kernel)
            sum += Decimal((-1**n)) * delta_sum
            delta_sum_list.append(kernel)

            if kernel > decimal_precision :
                accuracy_overflow = True

            if n != 0:   
                if tolerance > delta_sum:
                    break
        
        # Mask the sum if it exceeded the max n convergence, 
        # or if the decimal precision was not high enough
        terms_to_converge = n

        if terms_to_converge >= max_n_convergence:
            sum = np.nan
            
        if accuracy_overflow:
            sum = np.nan

        ## Calculate the transmissivity
        eta_i = np.sqrt(mu_0 / (epsilon_i_prime * epsilon_0))
        eta_t = np.sqrt(mu_0 / (epsilon_t_prime * epsilon_0))
        n_i = np.sqrt(epsilon_i_prime * epsilon_0 * mu_0)
        n_t = np.sqrt(epsilon_t_prime * epsilon_0 * mu_0)

        R_v = (n_i * np.cos(theta_i) - n_t * np.sqrt(1 - (np.sin(theta_i) * n_i / n_t)**2)) \
            / (n_i * np.cos(theta_i) + n_t * np.sqrt(1 - (np.sin(theta_i) * n_i / n_t)**2))

        R_h = (n_i * np.sqrt(1 - (n_i * np.sin(theta_i) / n_t)**2) - n_t * np.cos(theta_i)) \
            / (n_i * np.sqrt(1 - (n_i * np.sin(theta_i) / n_t)**2) + n_t * np.cos(theta_i))

        if bistatic_polarization == 'hh':
            N_ab = ((1 + R_h) * np.cos(theta_t) + (eta_t / eta_i) * (1 - R_h) * np.cos(theta_i)) * np.cos(phi_t)
        elif bistatic_polarization == 'hv':
            N_ab = (-1 * (1 + R_h) - (eta_t / eta_i) * (1 - R_h) * np.cos(theta_i) * np.cos(theta_t)) * np.sin(phi_t)
        elif bistatic_polarization == 'vh':
            N_ab = ((eta_t / eta_i) * (1 + R_v) - (1 - R_v) * np.cos(theta_i) * np.cos(theta_t)) * np.sin(phi_t)
        elif bistatic_polarization == 'vv':
            N_ab = ((eta_t / eta_i) * (1 + R_v) + (1 - R_v) * np.cos(theta_i))
        else:
            raise(ValueError('bistatic polarization must be \'vv\',  \'vh\',  \'hv\',  or \'hh\''))

        t_ab = (k_t**2 / np.cos(theta_i)) * (eta_i / eta_t) * np.abs(N_ab)**2 * (1 / (2*H)) * float(sum)

        if debug:
            return t_ab, sum, terms_to_converge, accuracy_overflow
        else:
            return t_ab

    class mission_model:
        def __init__(self,
            low_band_f = 5.373e6,
            high_band_f = 413e6,
            max_BER = 10**-5,
            bit_rate = 1e3, # bps
            link_BW = 10e3, # 3.43e3 # Hz
            P_t = 1 # W
            ):
            
            self.max_BER = max_BER
            self.bit_rate = bit_rate
            self.link_BW = link_BW
            self.P_t = P_t
            
            self.low_band_f = low_band_f
            self.low_band_omega = 2 * np.pi * low_band_f
            self.high_band_f = high_band_f
            self.high_band_omega = 2 * np.pi * high_band_f

    mm = mission_model()

    theta = 0
    omega = mm.low_band_omega

    # Estimate the loss at each delta d
    epsilon_s_prime = eim.cryosphere_model_df['epsilon_s_prime']
    epsilon_s_primeprime = eim.cryosphere_model_df['epsilon_s_primeprime']
    sigma_s = eim.cryosphere_model_df['sigma_s']
    eim.cryosphere_model_df['alpha_s low band'] = \
        (omega / np.sqrt(2)) * np.sqrt(epsilon_0 * mu_0)\
        * np.sqrt(np.sqrt(epsilon_s_prime**2 + (epsilon_s_primeprime + sigma_s / (epsilon_0 * omega))**2) \
            - epsilon_s_prime)
    eim.cryosphere_model_df['alpha_s high band'] = \
        (mm.high_band_omega / np.sqrt(2)) * np.sqrt(epsilon_0 * mu_0)\
        * np.sqrt(np.sqrt(epsilon_s_prime**2 + (epsilon_s_primeprime + sigma_s / (epsilon_0 * mm.high_band_omega))**2) \
            - epsilon_s_prime)
    eim.cryosphere_model_df['delta_path_loss low band'] = np.e**(-2 * (eim.delta_d / np.cos(theta)) * eim.cryosphere_model_df['alpha_s low band'])
    eim.cryosphere_model_df['delta_path_loss high band'] = np.e**(-2 * (eim.delta_d / np.cos(theta)) * eim.cryosphere_model_df['alpha_s high band'])

    # Antenna pattern

    class antenna:
            UHF_directivity_pattern_RHCP = np.array([[2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00, 2.81451268e+00, 2.81451268e+00, 2.81451268e+00,
            2.81451268e+00],
        [2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00, 2.77452095e+00, 2.77452095e+00, 2.77452095e+00,
            2.77452095e+00],
        [2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00, 2.66438448e+00, 2.66438448e+00, 2.66438448e+00,
            2.66438448e+00],
        [2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00, 2.49417846e+00, 2.49417846e+00, 2.49417846e+00,
            2.49417846e+00],
        [2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00, 2.27292529e+00, 2.27292529e+00, 2.27292529e+00,
            2.27292529e+00],
        [2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00, 2.00978482e+00, 2.00978482e+00, 2.00978482e+00,
            2.00978482e+00],
        [1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00, 1.71831651e+00, 1.71831651e+00, 1.71831651e+00,
            1.71831651e+00],
        [1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00, 1.41817344e+00, 1.41817344e+00, 1.41817344e+00,
            1.41817344e+00],
        [1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00, 1.13095235e+00, 1.13095235e+00, 1.13095235e+00,
            1.13095235e+00],
        [8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01, 8.72864043e-01, 8.72864043e-01, 8.72864043e-01,
            8.72864043e-01],
        [6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01, 6.50163277e-01, 6.50163277e-01, 6.50163277e-01,
            6.50163277e-01],
        [4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01, 4.61087529e-01, 4.61087529e-01, 4.61087529e-01,
            4.61087529e-01],
        [3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01, 3.02599145e-01, 3.02599145e-01, 3.02599145e-01,
            3.02599145e-01],
        [1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01, 1.75832364e-01, 1.75832364e-01, 1.75832364e-01,
            1.75832364e-01],
        [8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02, 8.49930623e-02, 8.49930623e-02, 8.49930623e-02,
            8.49930623e-02],
        [3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02, 3.10312377e-02, 3.10312377e-02, 3.10312377e-02,
            3.10312377e-02],
        [7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03, 7.11598318e-03, 7.11598318e-03, 7.11598318e-03,
            7.11598318e-03],
        [7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04, 7.19810169e-04, 7.19810169e-04, 7.19810169e-04,
            7.19810169e-04],
        [1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04, 1.60925918e-04, 1.60925918e-04, 1.60925918e-04,
            1.60925918e-04]])

            HF_directivity_pattern_RHCP = np.array([[1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00],
            [1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00],
            [1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00],
            [1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00],
            [8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01],
            [6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01],
            [3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01],
            [1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01],
            [4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02],
            [5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33, 5.62409918e-33, 5.62409918e-33, 5.62409918e-33,
                    5.62409918e-33],
            [4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02, 4.52305344e-02, 4.52305344e-02, 4.52305344e-02,
                    4.52305344e-02],
            [1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01, 1.75466668e-01, 1.75466668e-01, 1.75466668e-01,
                    1.75466668e-01],
            [3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01, 3.75000000e-01, 3.75000000e-01, 3.75000000e-01,
                    3.75000000e-01],
            [6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01, 6.19763867e-01, 6.19763867e-01, 6.19763867e-01,
                    6.19763867e-01],
            [8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01, 8.80236133e-01, 8.80236133e-01, 8.80236133e-01,
                    8.80236133e-01],
            [1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00, 1.12500000e+00, 1.12500000e+00, 1.12500000e+00,
                    1.12500000e+00],
            [1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00, 1.32453333e+00, 1.32453333e+00, 1.32453333e+00,
                    1.32453333e+00],
            [1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00, 1.45476947e+00, 1.45476947e+00, 1.45476947e+00,
                    1.45476947e+00],
            [1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00, 1.50000000e+00, 1.50000000e+00, 1.50000000e+00,
                    1.50000000e+00]])

            phi_grid = np.array([[0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531],
            [0.        , 0.17453293, 0.34906585, 0.52359878, 0.6981317 ,
                    0.87266463, 1.04719755, 1.22173048, 1.3962634 , 1.57079633,
                    1.74532925, 1.91986218, 2.0943951 , 2.26892803, 2.44346095,
                    2.61799388, 2.7925268 , 2.96705973, 3.14159265, 3.31612558,
                    3.4906585 , 3.66519143, 3.83972435, 4.01425728, 4.1887902 ,
                    4.36332313, 4.53785606, 4.71238898, 4.88692191, 5.06145483,
                    5.23598776, 5.41052068, 5.58505361, 5.75958653, 5.93411946,
                    6.10865238, 6.28318531]])

            theta_grid = np.array([[0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        ],
            [0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293, 0.17453293, 0.17453293, 0.17453293,
                    0.17453293, 0.17453293],
            [0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585, 0.34906585, 0.34906585, 0.34906585,
                    0.34906585, 0.34906585],
            [0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878, 0.52359878, 0.52359878, 0.52359878,
                    0.52359878, 0.52359878],
            [0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 , 0.6981317 ,
                    0.6981317 , 0.6981317 ],
            [0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463, 0.87266463, 0.87266463, 0.87266463,
                    0.87266463, 0.87266463],
            [1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755, 1.04719755, 1.04719755, 1.04719755,
                    1.04719755, 1.04719755],
            [1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048, 1.22173048, 1.22173048, 1.22173048,
                    1.22173048, 1.22173048],
            [1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 , 1.3962634 ,
                    1.3962634 , 1.3962634 ],
            [1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633, 1.57079633, 1.57079633, 1.57079633,
                    1.57079633, 1.57079633],
            [1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925, 1.74532925, 1.74532925, 1.74532925,
                    1.74532925, 1.74532925],
            [1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218, 1.91986218, 1.91986218, 1.91986218,
                    1.91986218, 1.91986218],
            [2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 , 2.0943951 ,
                    2.0943951 , 2.0943951 ],
            [2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803, 2.26892803, 2.26892803, 2.26892803,
                    2.26892803, 2.26892803],
            [2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095, 2.44346095, 2.44346095, 2.44346095,
                    2.44346095, 2.44346095],
            [2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388, 2.61799388, 2.61799388, 2.61799388,
                    2.61799388, 2.61799388],
            [2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 , 2.7925268 ,
                    2.7925268 , 2.7925268 ],
            [2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973, 2.96705973, 2.96705973, 2.96705973,
                    2.96705973, 2.96705973],
            [3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265, 3.14159265, 3.14159265, 3.14159265,
                    3.14159265, 3.14159265]])

    ant = antenna()

    def brightness_field_of_europan_sky():
        #Define coldspace, jovian, gal radiation field for a mission 
        T_B_J_low_band = 10**11 #K
        T_B_J_high_band = 10**2 # K
        T_B_gal_low_band = 10**7 # K
        T_B_gal_high_band = T_B_J_high_band
        T_B_coldspace = 2.7 #K
        
        # Define the theta and phi sampling grid
        theta = np.arange(0, 181, 1, dtype=int) # deg
        phi = np.arange(0, 361, 1, dtype=int) # deg

        phi_grid, theta_grid  = np.meshgrid(phi, theta)

        # The orientation of the coordinate system is taken such that
        # Europa's equator is theta==90, and all phi
        # The sub Jovian point is located at theta==90, phi==0
        # The anti Jovian point is located at theta==90, phi==180
        # The north pole is located at theta==0
        # The south pole is located at theta==180

        # Define the brightness grid with vertical and horizontal polarization
        brightness_field_of_europan_sky_vertical_low_band = np.zeros_like(theta_grid, dtype=float).flatten()
        brightness_field_of_europan_sky_horizontal_low_band = np.zeros_like(theta_grid, dtype=float).flatten()
        brightness_field_of_europan_sky_vertical_high_band = np.zeros_like(theta_grid, dtype=float).flatten()
        brightness_field_of_europan_sky_horizontal_high_band = np.zeros_like(theta_grid, dtype=float).flatten()


        # Assume Europa is on the anti-solar side of europa
        # The galactic background is then assumed to be a 30 deg
        # wide band of radiation illuminating the antiJovian side of Europa
        # 60 degrees north of the equator of Europa
        # First we will create a 30 degree wide band on the equator
        # and then we'll rotate Europa pattern to fit to the appropriate orientation

        # Draw the 30 degree wide band
        for i in np.arange(theta_grid.size):
            theta = theta_grid.flatten()[i]
            phi = phi_grid.flatten()[i]

            if theta >= 75 and theta <= 105:
                if phi >= 90 and phi <= 270:
                    brightness_field_of_europan_sky_vertical_low_band[i] += 0.5 * T_B_gal_low_band
                    brightness_field_of_europan_sky_horizontal_low_band[i] += 0.5 * T_B_gal_low_band
                    
                    brightness_field_of_europan_sky_vertical_high_band[i] += 0.5 * T_B_gal_high_band
                    brightness_field_of_europan_sky_horizontal_high_band[i] += 0.5 * T_B_gal_high_band

        # Rotate the pattern upwards by 60 degrees
        #theta_grid = (theta_grid - 60) % 181

        brightness_field_of_europan_sky_vertical_low_band = brightness_field_of_europan_sky_vertical_low_band.reshape(theta_grid.shape)
        brightness_field_of_europan_sky_horizontal_low_band = brightness_field_of_europan_sky_horizontal_low_band.reshape(theta_grid.shape)
        brightness_field_of_europan_sky_vertical_high_band = brightness_field_of_europan_sky_vertical_high_band.reshape(theta_grid.shape)
        brightness_field_of_europan_sky_horizontal_high_band = brightness_field_of_europan_sky_horizontal_high_band.reshape(theta_grid.shape)

        brightness_field_of_europan_sky_vertical_low_band = \
            np.roll(brightness_field_of_europan_sky_vertical_low_band, -60, 0)
        brightness_field_of_europan_sky_horizontal_low_band = \
            np.roll(brightness_field_of_europan_sky_horizontal_low_band, -60, 0)
        brightness_field_of_europan_sky_vertical_high_band = \
            np.roll(brightness_field_of_europan_sky_vertical_high_band, -60, 0)
        brightness_field_of_europan_sky_horizontal_high_band = \
            np.roll(brightness_field_of_europan_sky_horizontal_high_band, -60, 0)
            
        brightness_field_of_europan_sky_vertical_low_band = brightness_field_of_europan_sky_vertical_low_band.flatten()
        brightness_field_of_europan_sky_horizontal_low_band = brightness_field_of_europan_sky_horizontal_low_band.flatten()
        brightness_field_of_europan_sky_vertical_high_band = brightness_field_of_europan_sky_vertical_high_band.flatten()
        brightness_field_of_europan_sky_horizontal_high_band = brightness_field_of_europan_sky_horizontal_high_band.flatten()


        # Then we'll add in the cold space background, 
        # and the DIM/DAM radiation fields since they are fixed with respect to the orientatino of Europa
        for i in np.arange(theta_grid.size):
            theta = theta_grid.flatten()[i]
            phi = phi_grid.flatten()[i]

            brightness_field_of_europan_sky_vertical_low_band[i] += 0.5 * T_B_coldspace
            brightness_field_of_europan_sky_horizontal_low_band[i] += 0.5 * T_B_coldspace
            brightness_field_of_europan_sky_vertical_high_band[i] += 0.5 * T_B_coldspace
            brightness_field_of_europan_sky_horizontal_high_band[i] += 0.5 * T_B_coldspace

            # DAM radiation illumination (from aural regions of jupiter only)
            if theta == (90 - 6) or theta == (90 + 6):
                if phi == 0:
                    brightness_field_of_europan_sky_vertical_low_band[i] += 0.5 * T_B_J_low_band
                    brightness_field_of_europan_sky_horizontal_low_band[i] += 0.5 * T_B_J_low_band

            # DIM radiation illumination (from jupiter itself directly)
            if theta >= (90 - 6) and theta <= (90 + 6):
                if phi >= (360 - 6) or phi <= 6:
                    brightness_field_of_europan_sky_vertical_high_band[i] += 0.5 * T_B_J_high_band
                    brightness_field_of_europan_sky_horizontal_high_band[i] += 0.5 * T_B_J_high_band


        brightness_field_of_europan_sky_vertical_low_band = brightness_field_of_europan_sky_vertical_low_band.reshape(theta_grid.shape)
        brightness_field_of_europan_sky_horizontal_low_band = brightness_field_of_europan_sky_horizontal_low_band.reshape(theta_grid.shape)
        brightness_field_of_europan_sky_vertical_high_band = brightness_field_of_europan_sky_vertical_high_band.reshape(theta_grid.shape)
        brightness_field_of_europan_sky_horizontal_high_band = brightness_field_of_europan_sky_horizontal_high_band.reshape(theta_grid.shape)

        # Resample to the 10 deg grid that the antenna pattern is using

        # Define the theta and phi sampling grid
        theta_resample = np.arange(0, 190, 10) # deg
        phi_resample = np.arange(0, 370, 10) # deg

        phi_grid_resample, theta_grid_resample  = np.meshgrid(phi_resample, theta_resample)

        brightness_field_of_europan_sky_vertical_low_band_resample = np.zeros_like(theta_grid_resample, dtype=float).flatten()
        brightness_field_of_europan_sky_horizontal_low_band_resample = np.zeros_like(theta_grid_resample, dtype=float).flatten()
        brightness_field_of_europan_sky_vertical_high_band_resample = np.zeros_like(theta_grid_resample, dtype=float).flatten()
        brightness_field_of_europan_sky_horizontal_high_band_resample = np.zeros_like(theta_grid_resample, dtype=float).flatten()

        for i in np.arange(theta_grid_resample.size):
            theta = theta_grid_resample.flatten()[i]
            phi = phi_grid_resample.flatten()[i]

            theta_range = (theta + np.arange(-5, 5, 1)) % 180
            phi_range = (phi + np.arange(-5, 5, 1)) % 360

            surface_area = 0
            for sub_theta in theta_range:
                for sub_phi in phi_range:
                    surface_area += 1 * 1#steradians
                    brightness_field_of_europan_sky_vertical_low_band_resample[i] += brightness_field_of_europan_sky_vertical_low_band[sub_theta, sub_phi]
                    brightness_field_of_europan_sky_horizontal_low_band_resample[i] += brightness_field_of_europan_sky_horizontal_low_band[sub_theta, sub_phi]
                    brightness_field_of_europan_sky_vertical_high_band_resample[i] += brightness_field_of_europan_sky_vertical_high_band[sub_theta, sub_phi]
                    brightness_field_of_europan_sky_horizontal_high_band_resample[i] += brightness_field_of_europan_sky_horizontal_high_band[sub_theta, sub_phi]

            brightness_field_of_europan_sky_vertical_low_band_resample[i] = brightness_field_of_europan_sky_vertical_low_band_resample[i] / surface_area
            brightness_field_of_europan_sky_horizontal_low_band_resample[i] = brightness_field_of_europan_sky_horizontal_low_band_resample[i] / surface_area
            brightness_field_of_europan_sky_vertical_high_band_resample[i] = brightness_field_of_europan_sky_vertical_high_band_resample[i] / surface_area
            brightness_field_of_europan_sky_horizontal_high_band_resample[i] = brightness_field_of_europan_sky_horizontal_high_band_resample[i] / surface_area

        brightness_field_of_europan_sky_vertical_low_band_resample = brightness_field_of_europan_sky_vertical_low_band_resample.reshape(theta_grid_resample.shape)
        brightness_field_of_europan_sky_horizontal_low_band_resample = brightness_field_of_europan_sky_horizontal_low_band_resample.reshape(theta_grid_resample.shape)
        brightness_field_of_europan_sky_vertical_high_band_resample = brightness_field_of_europan_sky_vertical_high_band_resample.reshape(theta_grid_resample.shape)
        brightness_field_of_europan_sky_horizontal_high_band_resample = brightness_field_of_europan_sky_horizontal_high_band_resample.reshape(theta_grid_resample.shape)


        return brightness_field_of_europan_sky_vertical_low_band_resample, \
            brightness_field_of_europan_sky_horizontal_low_band_resample, \
                brightness_field_of_europan_sky_vertical_high_band_resample, \
                    brightness_field_of_europan_sky_horizontal_high_band_resample

    brightness_field_of_europan_sky_vertical_low_band, \
        brightness_field_of_europan_sky_horizontal_low_band, \
            brightness_field_of_europan_sky_vertical_high_band, \
                brightness_field_of_europan_sky_horizontal_high_band = brightness_field_of_europan_sky()

    # Evaluation of the sub-Jovian point on Europa
    # Rotate the brightness field pattern so we are standing on the sub-jovian point
    dtheta = 10
    dphi = 10

    amount_to_roll_theta = int(-80 / dtheta)
    amount_to_roll_phi = int(0 / dphi)

    brightness_field_of_europan_sky_vertical_low_band = brightness_field_of_europan_sky_vertical_low_band.reshape(ant.theta_grid.shape)
    brightness_field_of_europan_sky_horizontal_low_band = brightness_field_of_europan_sky_horizontal_low_band.reshape(ant.theta_grid.shape)
    brightness_field_of_europan_sky_vertical_high_band = brightness_field_of_europan_sky_vertical_high_band.reshape(ant.theta_grid.shape)
    brightness_field_of_europan_sky_horizontal_high_band = brightness_field_of_europan_sky_horizontal_high_band.reshape(ant.theta_grid.shape)

    brightness_field_of_europan_sky_vertical_low_band = \
        np.roll(brightness_field_of_europan_sky_vertical_low_band, amount_to_roll_theta, 0)
    brightness_field_of_europan_sky_horizontal_low_band = \
        np.roll(brightness_field_of_europan_sky_horizontal_low_band, amount_to_roll_theta, 0)
    brightness_field_of_europan_sky_vertical_high_band = \
        np.roll(brightness_field_of_europan_sky_vertical_high_band, amount_to_roll_theta, 0)
    brightness_field_of_europan_sky_horizontal_high_band = \
        np.roll(brightness_field_of_europan_sky_horizontal_high_band, amount_to_roll_theta, 0)
        
    brightness_field_of_europan_sky_vertical_low_band = brightness_field_of_europan_sky_vertical_low_band.flatten()
    brightness_field_of_europan_sky_horizontal_low_band = brightness_field_of_europan_sky_horizontal_low_band.flatten()
    brightness_field_of_europan_sky_vertical_high_band = brightness_field_of_europan_sky_vertical_high_band.flatten()
    brightness_field_of_europan_sky_horizontal_high_band = brightness_field_of_europan_sky_horizontal_high_band.flatten()

    # Integrate the transmitted field by summing to find transmitted field over all incident fields
    # Low band
    f = mm.low_band_f
    epsilon_i_prime = 1
    epsilon_t_prime = eim.cryosphere_model_df['epsilon_s_prime'].values[0]
    H = 0.75
    sigma_ref = 0.2
    sigma = sigma_ref * (3e8/5.373e6)**(H)
    vertical_bistatic_polarizations = ['vv', 'hv']
    horizontal_bistatic_polarizations = ['hh', 'vh']

    brightness_field_of_europan_sky_vertical = \
        brightness_field_of_europan_sky_vertical_low_band
    brightness_field_of_europan_sky_horizontal = \
        brightness_field_of_europan_sky_horizontal_low_band

    brightness_temperature_vertical_low_band = np.zeros_like(ant.theta_grid).flatten()
    brightness_temperature_horizontal_low_band = np.zeros_like(ant.theta_grid).flatten()

    theta_t_values = ant.theta_grid.flatten()
    phi_t_values = ant.phi_grid.flatten()

    theta_i_values = ant.theta_grid.flatten()
    phi_i_values = ant.phi_grid.flatten()

    dtheta = np.deg2rad(10)
    dphi = np.deg2rad(10)

    for t in np.arange(ant.HF_directivity_pattern_RHCP.size):
        theta_t = theta_t_values[t]
        phi_t = phi_t_values[t]

        for i in np.arange(ant.HF_directivity_pattern_RHCP.size):
            theta_i = theta_i_values[i]
            phi_i = phi_i_values[i]
            
            if theta_t < np.pi/2 and theta_i < np.pi/2:
                gamma_vv = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='vv'
                    ))

                gamma_vh = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='vh'
                    ))
                
                gamma_hh = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='hh'
                    ))            

                gamma_hv = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='hv'
                    ))


                brightness_temperature_vertical_low_band[t] += gamma_vv * brightness_field_of_europan_sky_vertical[i] * dtheta * dphi + \
                    gamma_vh * brightness_field_of_europan_sky_horizontal[i] * dtheta * dphi
                brightness_temperature_horizontal_low_band[t] += gamma_hh * brightness_field_of_europan_sky_horizontal[i] * dtheta * dphi+ \
                    gamma_hv * brightness_field_of_europan_sky_vertical[i] * dtheta * dphi
                
    brightness_temperature_vertical_low_band = np.sin(ant.theta_grid.flatten()) * brightness_temperature_vertical_low_band / (4 * np.pi)
    brightness_temperature_vertical_low_band = brightness_temperature_vertical_low_band.reshape(ant.theta_grid.shape)

    brightness_temperature_horizontal_low_band = np.sin(ant.theta_grid.flatten()) * brightness_temperature_horizontal_low_band / (4 * np.pi)
    brightness_temperature_horizontal_low_band = brightness_temperature_horizontal_low_band.reshape(ant.theta_grid.shape)

    # Integrate the transmitted field by summing to find transmitted field over all incident fields
    # High band
    f = mm.high_band_f
    epsilon_i_prime = 1
    epsilon_t_prime = eim.cryosphere_model_df['epsilon_s_prime'].values[0]
    H = 0.75
    sigma_ref = 0.2
    sigma = sigma_ref * (3e8/f)**(H)
    vertical_bistatic_polarizations = ['vv', 'hv']
    horizontal_bistatic_polarizations = ['hh', 'vh']

    brightness_field_of_europan_sky_vertical = \
        brightness_field_of_europan_sky_vertical_high_band
    brightness_field_of_europan_sky_horizontal = \
        brightness_field_of_europan_sky_horizontal_high_band

    brightness_temperature_vertical_high_band = np.zeros_like(ant.theta_grid).flatten()
    brightness_temperature_horizontal_high_band = np.zeros_like(ant.theta_grid).flatten()

    theta_t_values = ant.theta_grid.flatten()
    phi_t_values = ant.phi_grid.flatten()

    theta_i_values = ant.theta_grid.flatten()
    phi_i_values = ant.phi_grid.flatten()

    dtheta = np.deg2rad(10)
    dphi = np.deg2rad(10)

    for t in np.arange(ant.UHF_directivity_pattern_RHCP.size):
        theta_t = theta_t_values[t]
        phi_t = phi_t_values[t]

        for i in np.arange(ant.UHF_directivity_pattern_RHCP.size):
            theta_i = theta_i_values[i]
            phi_i = phi_i_values[i]
            
            if theta_t < np.pi/2 and theta_i < np.pi/2:
                gamma_vv = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='vv',
                        max_n_convergence=10
                    ))

                gamma_vh = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='vh',
                        max_n_convergence=10
                    ))
                
                gamma_hh = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='hh',
                        max_n_convergence=10
                    ))            

                gamma_hv = np.nan_to_num(transmissivity_fBm(
                        f = f, # Hz
                        epsilon_i_prime = epsilon_i_prime,
                        epsilon_t_prime = epsilon_t_prime,
                        sigma_A = sigma,
                        H = H,
                        theta_i = theta_i,
                        phi_t = phi_t - phi_i,
                        theta_t = theta_t,
                        bistatic_polarization='hv',
                        max_n_convergence=10
                    ))


                brightness_temperature_vertical_high_band[t] += gamma_vv * brightness_field_of_europan_sky_vertical[i] * dtheta * dphi + \
                    gamma_vh * brightness_field_of_europan_sky_horizontal[i] * dtheta * dphi
                brightness_temperature_horizontal_high_band[t] += gamma_hh * brightness_field_of_europan_sky_horizontal[i] * dtheta * dphi+ \
                    gamma_hv * brightness_field_of_europan_sky_vertical[i] * dtheta * dphi

    brightness_temperature_vertical_high_band = np.sin(ant.theta_grid.flatten()) * brightness_temperature_vertical_high_band / (4 * np.pi)
    brightness_temperature_vertical_high_band = brightness_temperature_vertical_high_band.reshape(ant.theta_grid.shape)

    brightness_temperature_horizontal_high_band = np.sin(ant.theta_grid.flatten()) * brightness_temperature_horizontal_high_band / (4 * np.pi)
    brightness_temperature_horizontal_high_band = brightness_temperature_horizontal_high_band.reshape(ant.theta_grid.shape)

    # Do the same thing only using the differential math version
    alpha_s_array = np.array(eim.cryosphere_model_df['alpha_s low band'])

    path_loss_pattern_high_band = np.ones_like(
        brightness_field_of_europan_sky_horizontal_low_band.flatten())
    path_loss_pattern_low_band = np.ones_like(
        brightness_field_of_europan_sky_horizontal_low_band.flatten())
    T_A_low_band = np.zeros_like(alpha_s_array)
    T_A_high_band = np.zeros_like(alpha_s_array)

    brightness_temperature_horizontal_low_band_at_depth = brightness_temperature_horizontal_low_band.copy()
    brightness_temperature_vertical_low_band_at_depth = brightness_temperature_vertical_low_band.copy()
    brightness_temperature_horizontal_high_band_at_depth = brightness_temperature_horizontal_high_band.copy()
    brightness_temperature_vertical_high_band_at_depth = brightness_temperature_vertical_high_band.copy()

    def calc_path_loss(omega, epsilon_s_prime, epsilon_s_primeprime, sigma_s):
        return (omega / np.sqrt(2)) * np.sqrt(epsilon_0 * mu_0)\
            * np.sqrt(np.sqrt(epsilon_s_prime**2 + (epsilon_s_primeprime + sigma_s / (epsilon_0 * omega))**2) \
                - epsilon_s_prime)

    delta_path_loss_high_band = np.ones_like(
        brightness_field_of_europan_sky_horizontal_low_band.flatten())
    delta_path_loss_low_band = np.ones_like(
        brightness_field_of_europan_sky_horizontal_low_band.flatten())

    for d in np.arange(len(eim.cryosphere_model_df)):
        epsilon_s_prime = eim.cryosphere_model_df.loc[d]['epsilon_s_prime']
        epsilon_s_primeprime = eim.cryosphere_model_df.loc[d]['epsilon_s_primeprime']
        sigma_s = eim.cryosphere_model_df.loc[d]['sigma_s']
        temperature_ice = eim.cryosphere_model_df.loc[d]['Temperature (K)']
        for t in np.arange(ant.UHF_directivity_pattern_RHCP.size):
            theta_t = theta_t_values[t]
            phi_t = phi_t_values[t]

            if theta_t != np.pi / 2 and theta_t != 3 * np.pi /2:
                alpha_high_band = calc_path_loss(mm.high_band_omega, epsilon_s_prime, epsilon_s_primeprime, sigma_s)
                alpha_low_band = calc_path_loss(mm.low_band_omega, epsilon_s_prime, epsilon_s_primeprime, sigma_s)
                
                delta_path_loss_high_band[t] = 1 - np.e**(-2 * (eim.delta_d / np.abs(np.cos(theta_t))) * alpha_high_band)
                delta_path_loss_low_band[t] = 1 - np.e**(-2 * (eim.delta_d / np.abs(np.cos(theta_t))) * alpha_low_band)
            else: # Limit of the exponential function above when theta_t is 90 degrees
                path_loss_pattern_high_band[t] = 1
                path_loss_pattern_low_band[t] = 1

        if d > 0:
            brightness_temperature_horizontal_low_band_at_depth += \
                -1 * delta_path_loss_low_band.reshape(directivity_RHCP_high_band.shape) \
                    * brightness_temperature_horizontal_low_band_at_depth \
                        + temperature_ice * delta_path_loss_low_band.reshape(directivity_RHCP_high_band.shape)
            brightness_temperature_vertical_low_band_at_depth += \
                -1 * delta_path_loss_low_band.reshape(directivity_RHCP_high_band.shape) \
                    * brightness_temperature_vertical_low_band_at_depth \
                        + temperature_ice * delta_path_loss_low_band.reshape(directivity_RHCP_high_band.shape)
            brightness_temperature_horizontal_high_band_at_depth += \
                -1 * delta_path_loss_high_band.reshape(directivity_RHCP_high_band.shape) \
                    * brightness_temperature_horizontal_high_band_at_depth      \
                        + temperature_ice * delta_path_loss_high_band.reshape(directivity_RHCP_high_band.shape)   
            brightness_temperature_vertical_high_band_at_depth += \
                -1 * delta_path_loss_high_band.reshape(directivity_RHCP_high_band.shape) \
                    * brightness_temperature_vertical_high_band_at_depth \
                        + temperature_ice * delta_path_loss_high_band.reshape(directivity_RHCP_high_band.shape)

        # Integrate over antenna directivity to get antenna temperature
        directivity_RHCP_high_band = ant.UHF_directivity_pattern_RHCP
        temp = (brightness_temperature_horizontal_high_band_at_depth \
            + brightness_temperature_vertical_high_band_at_depth) * directivity_RHCP_high_band \
            * np.sin(np.abs(theta_t_values.reshape(directivity_RHCP_high_band.shape)))
        temp = scipy.integrate.simpson(
            temp, 
            x=phi_t_values.reshape(directivity_RHCP_high_band.shape))
        T_A_high_band[d] = (1 / (4 * np.pi)) * scipy.integrate.simpson(
            temp, 
            x=theta_t_values.reshape(ant.UHF_directivity_pattern_RHCP.shape)[:,0])

        directivity_RHCP_low_band = ant.HF_directivity_pattern_RHCP
        temp = (brightness_temperature_horizontal_low_band_at_depth \
            + brightness_temperature_vertical_low_band_at_depth) * directivity_RHCP_low_band \
            * np.sin(np.abs(theta_t_values.reshape(directivity_RHCP_low_band.shape)))
        temp = scipy.integrate.simpson(
            temp, 
            x=phi_t_values.reshape(directivity_RHCP_low_band.shape))
        T_A_low_band[d] = (1 / (4 * np.pi)) * scipy.integrate.simpson(
            temp, 
            x=theta_t_values.reshape(ant.HF_directivity_pattern_RHCP.shape)[:,0])

    eim.cryosphere_model_df['T_A Downwelling Low Band (K)'] = T_A_low_band
    eim.cryosphere_model_df['T_A Downwelling High Band (K)'] = T_A_high_band

    # Repeat the same thing for the upwelling on the high band only
    alpha_s_array = np.array(eim.cryosphere_model_df['alpha_s low band'])

    path_loss_pattern_upwelling_high_band = np.ones_like(
        brightness_field_of_europan_sky_horizontal_high_band.flatten())

    T_A_upwelling_high_band = np.zeros_like(alpha_s_array)

    T_ocean = 273.15 #K

    brightness_temperature_horizontal_upwelling_high_band_at_depth = T_ocean * np.ones_like(brightness_temperature_horizontal_high_band)
    brightness_temperature_vertical_upwelling_high_band_at_depth = T_ocean * np.ones_like(brightness_temperature_horizontal_high_band)

    delta_path_loss_upwelling_high_band = np.ones_like(
        brightness_field_of_europan_sky_horizontal_low_band.flatten())

    # Iterate from the deepest depth upward
    for d in np.flip(np.arange(len(eim.cryosphere_model_df))):
        epsilon_s_prime = eim.cryosphere_model_df.loc[d]['epsilon_s_prime']
        epsilon_s_primeprime = eim.cryosphere_model_df.loc[d]['epsilon_s_primeprime']
        sigma_s = eim.cryosphere_model_df.loc[d]['sigma_s']
        temperature_ice = eim.cryosphere_model_df.loc[d]['Temperature (K)']
        for t in np.arange(ant.UHF_directivity_pattern_RHCP.size):
            theta_t = theta_t_values[t]
            phi_t = phi_t_values[t]

            if theta_t != np.pi / 2 and theta_t != 3 * np.pi /2:
                alpha_high_band = calc_path_loss(mm.high_band_omega, epsilon_s_prime, epsilon_s_primeprime, sigma_s)
                
                delta_path_loss_upwelling_high_band[t] = 1 - np.e**(-2 * (eim.delta_d / np.abs(np.cos(theta_t))) * alpha_high_band)
            else: # Limit of the exponential function above when theta_t is 90 degrees
                path_loss_pattern_upwelling_high_band[t] = 1

        if d < len(eim.cryosphere_model_df)-1:
            brightness_temperature_horizontal_upwelling_high_band_at_depth += \
                -1 * delta_path_loss_upwelling_high_band.reshape(directivity_RHCP_high_band.shape) \
                    * brightness_temperature_horizontal_upwelling_high_band_at_depth      \
                        + temperature_ice * delta_path_loss_upwelling_high_band.reshape(directivity_RHCP_high_band.shape)   
            brightness_temperature_vertical_upwelling_high_band_at_depth += \
                -1 * delta_path_loss_upwelling_high_band.reshape(directivity_RHCP_high_band.shape) \
                    * brightness_temperature_vertical_upwelling_high_band_at_depth \
                        + temperature_ice * delta_path_loss_upwelling_high_band.reshape(directivity_RHCP_high_band.shape)

        # Integrate over antenna directivity to get antenna temperature
        directivity_RHCP_high_band = ant.UHF_directivity_pattern_RHCP
        temp = (brightness_temperature_horizontal_upwelling_high_band_at_depth \
            + brightness_temperature_vertical_upwelling_high_band_at_depth) * directivity_RHCP_high_band \
            * np.sin(np.abs(theta_t_values.reshape(directivity_RHCP_high_band.shape)))
        temp = scipy.integrate.simpson(
            temp, 
            x=phi_t_values.reshape(directivity_RHCP_high_band.shape))
        T_A_upwelling_high_band[d] = (1 / (4 * np.pi)) * scipy.integrate.simpson(
            temp, 
            x=theta_t_values.reshape(ant.UHF_directivity_pattern_RHCP.shape)[:,0])

    eim.cryosphere_model_df['T_A Upwelling High Band (K)'] = T_A_high_band

    class uhf_antenna():
        def directivity(self, T):
            directivity_in_100K_ice = 4.64 # dB
            directivity_in_273K_ice = 4.46 # dB
            m, b = math_funcs.linear_fit(
                100, math_funcs.db_2_power(directivity_in_100K_ice), 
                273, math_funcs.db_2_power(directivity_in_273K_ice))
            return m * T + b

        def radiation_efficiency(self, T):
            rad_eff_in_273K_ice = 0.228 # dB
            rad_eff_in_100K_ice = 0.223 # dB
            m, b = math_funcs.linear_fit(
                100, rad_eff_in_100K_ice, 
                273, rad_eff_in_273K_ice)
            return m * T + b
        
        def realized_gain(self, T):
            return self.directivity(T) * self.radiation_efficiency(T) * self.matching_efficiency

        matching_efficiency = 0.952
        carrier_frequency = 413e6 # Hz

    class hf_antenna():
        directivity = math_funcs.db_2_power(1.73) # dB
        radiation_efficiency = 0.007
        matching_efficiency = 1
        carrier_frequency = 5.373e6 # Hz

    high_band_antenna = uhf_antenna()
    low_band_antenna = hf_antenna()

    # while placement_depth < eim.D_total:
    bandwidth = 10e3 #Hz
    bit_rate = 1e3 #bps
    limit_probability_of_error = 10**-5
    noise_figure = math_funcs.db_2_power(11)
    receiver_temperature = 290 * (noise_figure - 1)

    epsilon_s_prime = eim.cryosphere_model_df.loc[0]['epsilon_s_prime']
    epsilon_s_primeprime = eim.cryosphere_model_df.loc[0]['epsilon_s_primeprime']
    sigma_s = eim.cryosphere_model_df.loc[0]['sigma_s']
    temperature_ice = eim.cryosphere_model_df.loc[0]['Temperature (K)']

    transmitted_power = 1
    lambda_s_t = c / (np.sqrt(epsilon_s_prime) * mm.high_band_f)
    transmitter_gain = high_band_antenna.realized_gain(temperature_ice)

    radiation_efficiency = high_band_antenna.radiation_efficiency(temperature_ice)
    matching_efficiency = high_band_antenna.matching_efficiency
    T_A = eim.cryosphere_model_df.loc[0]['T_A Upwelling High Band (K)']

    antenna_temperature = radiation_efficiency * matching_efficiency * T_A \
        + (1 - radiation_efficiency) * matching_efficiency * temperature_ice \
            + (1 - matching_efficiency) * 290
    system_temperature = antenna_temperature + receiver_temperature
    noise_power_upper_puck = k * system_temperature * bandwidth

    meter_distance_per_wave = 0
    attenuation = 1
    uhf_number_of_pucks = 1

    # Data to record
    placement_depths = [0]
    received_powers = [0]
    noise_powers = [noise_power_upper_puck]
    attenuations = [attenuation]
    meter_distance_per_waves = [meter_distance_per_wave]

    # Bit error rate for MFSK with N bits
    def probability_of_error_for_MFSK(CNR_per_bit, N):
        if 10*np.log10(CNR_per_bit) > 15:
            return 10**-40
        elif CNR_per_bit > 4*np.log(2):
            return np.e**(-(N/2) * (CNR_per_bit - 2 * np.log(2)))
        else:
            return np.e**(-1 * N * ((np.sqrt(CNR_per_bit) - np.sqrt(np.log(2)))**2))
        
    for d in np.arange(len(eim.cryosphere_model_df)):
        epsilon_s_prime = eim.cryosphere_model_df.loc[d]['epsilon_s_prime']
        epsilon_s_primeprime = eim.cryosphere_model_df.loc[d]['epsilon_s_primeprime']
        sigma_s = eim.cryosphere_model_df.loc[d]['sigma_s']
        temperature_ice = eim.cryosphere_model_df.loc[d]['Temperature (K)']
        
        lambda_s = c / (np.sqrt(epsilon_s_prime) * mm.high_band_f)
        lambda_s_r = lambda_s

        alpha = calc_path_loss(mm.high_band_omega, epsilon_s_prime, epsilon_s_primeprime, sigma_s)
        
        differential_attenuation = np.e**(-2 * (eim.delta_d) * alpha)
        attenuation *= differential_attenuation
        
        differential_meter_distance_per_wave = lambda_s * eim.delta_d
        meter_distance_per_wave += differential_meter_distance_per_wave
        space_path_loss = 1 / (meter_distance_per_wave**2)
        
        # Received power at the lower puck and upper puck
        received_power = transmitted_power * (lambda_s_t**2/(4 * np.pi)) \
            * transmitter_gain \
                * attenuation * space_path_loss \
                    * (lambda_s_r**2/(4 * np.pi)) \
                        * high_band_antenna.realized_gain(temperature_ice)
        
        # Noise power at the lower puck
        radiation_efficiency = high_band_antenna.radiation_efficiency(temperature_ice)
        matching_efficiency = high_band_antenna.matching_efficiency
        T_A = eim.cryosphere_model_df.loc[d]['T_A Downwelling High Band (K)']
        
        antenna_temperature = radiation_efficiency * matching_efficiency * T_A \
            + (1 - radiation_efficiency) * matching_efficiency * temperature_ice \
                + (1 - matching_efficiency) * 290
        system_temperature = antenna_temperature + receiver_temperature
        noise_power = k * system_temperature * bandwidth

        # Calculate the probability of a bit error at the lower puck
        SNR = received_power / noise_power
        CNR_per_bit = (bit_rate/bandwidth) * SNR
        probability_of_error = probability_of_error_for_MFSK(CNR_per_bit, 2)

        # Calculate the probability of a bit error at the upper puck
        SNR_upper_puck = received_power / noise_power_upper_puck
        CNR_per_bit_upper_puck = (bit_rate/bandwidth) * SNR_upper_puck
        probability_of_error_upper_puck = probability_of_error_for_MFSK(CNR_per_bit_upper_puck, 2)

        # If we are going to pass the limit of error probability, place a puck
        # and then reset all of the upper puck stuff
        if probability_of_error > limit_probability_of_error \
            and probability_of_error_upper_puck > limit_probability_of_error:
            uhf_number_of_pucks += 1

            # Record data
            placement_depths.append(eim.cryosphere_model_df.loc[d]['Depth (m)'])
            received_powers.append(received_power)
            noise_powers.append(noise_power)
            attenuations.append(attenuation)
            meter_distance_per_waves.append(meter_distance_per_wave)

            # Reset upper puck things

            lambda_s_t = c / (np.sqrt(epsilon_s_prime) * mm.high_band_f)
            transmitter_gain = high_band_antenna.realized_gain(temperature_ice)

            radiation_efficiency = high_band_antenna.radiation_efficiency(temperature_ice)
            matching_efficiency = high_band_antenna.matching_efficiency
            T_A = eim.cryosphere_model_df.loc[d]['T_A Upwelling High Band (K)']

            antenna_temperature = radiation_efficiency * matching_efficiency * T_A \
                + (1 - radiation_efficiency) * matching_efficiency * temperature_ice \
                    + (1 - matching_efficiency) * 290
            system_temperature = antenna_temperature + receiver_temperature
            noise_power_upper_puck = k * system_temperature * bandwidth

            meter_distance_per_wave = 0
            attenuation = 1

    # Repeat the calculation for the lower band
    bandwidth = 10e3 #Hz
    bit_rate = 1e3 #bps
    limit_probability_of_error = 10**-5
    noise_figure = math_funcs.db_2_power(11)
    receiver_temperature = 290 * (noise_figure - 1)

    epsilon_s_prime = eim.cryosphere_model_df.loc[0]['epsilon_s_prime']
    epsilon_s_primeprime = eim.cryosphere_model_df.loc[0]['epsilon_s_primeprime']
    sigma_s = eim.cryosphere_model_df.loc[0]['sigma_s']
    temperature_ice = eim.cryosphere_model_df.loc[0]['Temperature (K)']

    transmitted_power = 1
    lambda_s_t = c / (np.sqrt(epsilon_s_prime) * mm.low_band_f)
    transmitter_gain = low_band_antenna.directivity * low_band_antenna.matching_efficiency * low_band_antenna.radiation_efficiency

    radiation_efficiency = low_band_antenna.radiation_efficiency
    matching_efficiency = low_band_antenna.matching_efficiency
    T_A = eim.cryosphere_model_df.loc[0]['T_A Downwelling Low Band (K)']

    antenna_temperature = radiation_efficiency * matching_efficiency * T_A \
        + (1 - radiation_efficiency) * matching_efficiency * temperature_ice \
            + (1 - matching_efficiency) * 290
    system_temperature = antenna_temperature + receiver_temperature
    noise_power_upper_puck = k * system_temperature * bandwidth

    meter_distance_per_wave = 0
    attenuation = 1
    hf_number_of_pucks = 1

    # Data to record
    placement_depths = [0]
    received_powers = [0]
    noise_powers = [noise_power_upper_puck]
    attenuations = [attenuation]
    meter_distance_per_waves = [meter_distance_per_wave]

    # Bit error rate for MFSK with N bits
    def probability_of_error_for_MFSK(CNR_per_bit, N):
        if 10*np.log10(CNR_per_bit) > 15:
            return 10**-40
        elif CNR_per_bit > 4*np.log(2):
            return np.e**(-(N/2) * (CNR_per_bit - 2 * np.log(2)))
        else:
            return np.e**(-1 * N * ((np.sqrt(CNR_per_bit) - np.sqrt(np.log(2)))**2))
        
    for d in np.arange(len(eim.cryosphere_model_df)):
        epsilon_s_prime = eim.cryosphere_model_df.loc[d]['epsilon_s_prime']
        epsilon_s_primeprime = eim.cryosphere_model_df.loc[d]['epsilon_s_primeprime']
        sigma_s = eim.cryosphere_model_df.loc[d]['sigma_s']
        temperature_ice = eim.cryosphere_model_df.loc[d]['Temperature (K)']
        
        lambda_s = c / (np.sqrt(epsilon_s_prime) * mm.low_band_f)
        lambda_s_r = lambda_s

        alpha = calc_path_loss(mm.low_band_omega, epsilon_s_prime, epsilon_s_primeprime, sigma_s)
        
        differential_attenuation = np.e**(-2 * (eim.delta_d) * alpha)
        attenuation *= differential_attenuation
        
        differential_meter_distance_per_wave = lambda_s * eim.delta_d
        meter_distance_per_wave += differential_meter_distance_per_wave
        space_path_loss = 1 / (meter_distance_per_wave**2)
        
        # Received power at the lower puck and upper puck
        received_power = transmitted_power * (lambda_s_t**2/(4 * np.pi)) \
            * transmitter_gain \
                * attenuation * space_path_loss \
                    * (lambda_s_r**2/(4 * np.pi)) \
                        * transmitter_gain
        
        # Noise power at the lower puck
        T_A = eim.cryosphere_model_df.loc[d]['T_A Downwelling Low Band (K)']
        
        antenna_temperature = radiation_efficiency * matching_efficiency * T_A \
            + (1 - radiation_efficiency) * matching_efficiency * temperature_ice \
                + (1 - matching_efficiency) * 290
        system_temperature = antenna_temperature + receiver_temperature
        noise_power = k * system_temperature * bandwidth

        # Calculate the probability of a bit error at the lower puck
        SNR = received_power / noise_power
        CNR_per_bit = (bit_rate/bandwidth) * SNR
        probability_of_error = probability_of_error_for_MFSK(CNR_per_bit, 2)

        # Calculate the probability of a bit error at the upper puck
        SNR_upper_puck = received_power / noise_power_upper_puck
        CNR_per_bit_upper_puck = (bit_rate/bandwidth) * SNR_upper_puck
        probability_of_error_upper_puck = probability_of_error_for_MFSK(CNR_per_bit_upper_puck, 2)

        # If we are going to pass the limit of error probability, place a puck
        # and then reset all of the upper puck stuff
        if probability_of_error > limit_probability_of_error \
            and probability_of_error_upper_puck > limit_probability_of_error:
            hf_number_of_pucks += 1

            # Record data
            placement_depths.append(eim.cryosphere_model_df.loc[d]['Depth (m)'])
            received_powers.append(received_power)
            noise_powers.append(noise_power)
            attenuations.append(attenuation)
            meter_distance_per_waves.append(meter_distance_per_wave)

            # Reset upper puck things

            lambda_s_t = c / (np.sqrt(epsilon_s_prime) * mm.low_band_f)

            T_A = eim.cryosphere_model_df.loc[d]['T_A Downwelling Low Band (K)']

            antenna_temperature = radiation_efficiency * matching_efficiency * T_A \
                + (1 - radiation_efficiency) * matching_efficiency * temperature_ice \
                    + (1 - matching_efficiency) * 290
            system_temperature = antenna_temperature + receiver_temperature
            noise_power_upper_puck = k * system_temperature * bandwidth

            meter_distance_per_wave = 0
            attenuation = 1

    return hf_number_of_pucks, uhf_number_of_pucks

if __name__ == "__main__":
    print(evaluate_number_of_pucks_on_arbitrary_europa())